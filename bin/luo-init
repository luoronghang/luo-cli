#!/usr/bin/env node

const program = require('commander'),
      chalk = require('chalk'),
      path = require('path'),
      fs = require('fs'),
      ora = require('ora'),
      fse = require('fs-extra'),
      child_process = require('child_process'),
      exists = require('fs').existsSync,
      inquirer = require('inquirer');

const logger = require('../lib/logger');
const prompts = require('../lib/init/prompts');
const checkVersion = require('../lib/checkVersion');

/**
 * 1、luo init
 * 2、input:输入项目名称，并校验项目名称是否存在
 * 3、list:提示选择框架类型(vue2 or vue3 or react or nodejs)
 * 4、接受用户输入（项目名称和框架类型），执行项目创建
 *    基于目前的 cp 还是 git donwload ？,目前确定以cp方式
 * 5、安装 npm 包 
 * 6、success！ 
 * **/

//监听退出事件
process.on('exit', function(code) {
  if(code!=0){
    logger.fatal(`已退出 luo init code:${code}`)
  }
});

//help
program.on('--help',function(){
  console.log();
  console.log('  Examples:')
  console.log()
  console.log(chalk.gray('    # create a new project'))
  console.log('    $ luo init ${project-name}')
  console.log()
});

//初始化项目所在目录
const projectPath = process.cwd() + '/';
//各项目包所在目录
const packagePath = path.join(__dirname,'../packages/');

//parse输入的参数
program.parse(process.argv);

// console.log(!program.args[0] || program.args[0] === '.')
// console.log('path::::::::')
// console.log(program.args[0])
// console.log('path::::::::')

//接收反馈
inquirer.prompt(prompts).then(answers => {
  run(answers);
});

//执行项目创建
function run (answers){
  //check
  const isExists = exists(projectPath + answers.name);
  if(isExists){
    logger.fatal('项目已经存在，请使用其他名称！')
    process.exit(1)
    return;
  }
  checkVersion(function(){
    //create
    const tplPath = packagePath + answers.type; 
    const targetPath = projectPath + answers.name;
    console.log('模板目录::::::'+tplPath);
    console.log('目标目录::::::'+targetPath);
    fse.copy(tplPath,targetPath,{}).then(function(){
      logger.success(`项目：${answers.name} 创建成功~`)
      installDependencies(answers.name);
    }).catch(function(){
      process.exit(1)
    })
  });
}

//安装npm包依赖
function installDependencies(projectName){
  const spinner = ora('npm install...\n');
  spinner.start();
  const installTask = child_process.spawn('npm',['install'],{cwd:projectName});
  installTask.stdout.on('data',function(data){
    console.log(`stdout: ${data}`);
  });
  installTask.stderr.on('data',function(data){
    console.log(`stderr: ${data}`);
  });
  installTask.on('close',function(code){
    spinner.stop();
    console.log(`安装npm子进程退出，退出码 ${code}`);
    if(code!=0){
      console.log('exitCode');
      process.exitCode = code;
    }else{
      logger.success('npm 依赖包 安装成功!')
    }
  });
}